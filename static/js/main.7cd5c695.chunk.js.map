{"version":3,"sources":["utils/Markers.js","components/LeafletMapComponent.js","components/PixiOverlay.js","utils/giveMarkers.js","components/PixiOverlayMapComponent.js","utils/CircleMarkers.js","components/CircleMarkersMapComponent.js","components/MarkerClusterMapComponent.js","utils/giveLines.js","components/Routing.js","components/RoutingMapComponent.js","components/LinesAndMarkersMapComponent.js","components/ConditionalMapRendering.js","App.js","reportWebVitals.js","index.js"],"names":["MarkerPopup","props","number","Popup","Markers","dataPoints","markers","i","marker","Marker","position","Math","random","toFixed","icon","Icon","iconUrl","markerIcon","iconSize","iconAnchor","push","LeafletMapComponent","useState","MapContainer","center","zoom","TileLayer","url","attribution","PIXI","FAIL_IF_MAJOR_PERFORMANCE_CAVEAT","skipHello","PIXILoader","shared","openPopup","map","data","extraOptions","isPopup","popup","L","Object","assign","offset","setLatLng","setContent","content","openOn","onClick","on","getDefaultIcon","color","getEncodedIcon","svg","decoded","unescape","encodeURIComponent","base64","btoa","PixiOverlay","openedPopupData","setOpenedPopupData","openedTooltipData","setOpenedTooltipData","openedPopup","setOpenedPopup","openedTooltip","setOpenedTooltip","pixiOverlay","setPixiOverlay","loaded","setLoaded","useMap","useEffect","loading","reset","loadingAny","resolvedMarkerId","iconId","iconColor","resources","add","customIcon","load","pixiContainer","overlay","utils","scale","getScale","getContainer","children","forEach","child","set","getRenderer","render","addTo","removeChildren","container","renderer","project","latLngToLayerPoint","id","tooltip","popupOpen","markerSpriteAnchor","resolvedIconId","texture","markerTexture","anchor","x","y","markerSprite","from","markerCoords","interactive","defaultCursor","buttonMode","addChild","closePopup","autoClose","giveMarkers","console","log","length","PixiOverlayMapComponent","preferCanvas","minZoom","maxZoom","CircleMarkers","CircleMarker","radius","CircleMarkersMapComponent","MarkerClusterMapComponent","giveLines","linesToDraw","tempPolyLines","aPoint","bPoint","RoutingMapComponent","polyLines","polyline","idx","Polyline","positions","LinesAndMarkersMapComponent","ConditionalMapRendering","selectedValue","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","App","classes","inputValue","setInputValue","setSelectedValue","isSubmit","setIsSubmit","className","onSubmit","e","preventDefault","type","value","onChange","target","FormControl","InputLabel","Select","MenuItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"ySAMMA,EAAc,SAACC,GACjB,IAAQC,EAAYD,EAAZC,OAER,OAAQ,cAACC,EAAA,EAAD,UACJ,8BAAMD,OAsBCE,EAlBC,SAACH,GAKb,IAJA,IAAQI,EAAeJ,EAAfI,WAEFC,EAAU,GAERC,EAAI,EAAGA,EAAIF,EAAaE,IAAI,CACjC,IAAIC,EAAU,cAACC,EAAA,EAAD,CAETC,SAAU,EAAEC,KAAKC,UAAY,QAAU,SAAW,SAASC,QAAQ,IAAKF,KAAKC,UAAY,OAAS,OAAU,OAAQC,QAAQ,IAC5HC,KAAM,IAAIC,OAAK,CAACC,QAASC,IAAYC,SAAU,CAAC,GAAI,IAAKC,WAAY,CAAC,GAAI,MAHjE,SAKT,cAAC,EAAD,CAAajB,OAAQK,KAJhBA,GAMTD,EAAQc,KAAKZ,GAEjB,OAAO,mCAAGF,KCwBCe,G,MA3Ca,SAACpB,GAEzB,MAAmBqB,mBAAS,CAAC,SAAU,SAAhCZ,EAAP,oBACQL,EAAeJ,EAAfI,WA2BR,OACI,mCACA,eAACkB,EAAA,EAAD,CAAcC,OAAQd,EAAUe,KAAM,EAAtC,UACI,cAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,cAAC,EAAD,CAASvB,WAAcA,W,iCCrCnCwB,WAAcC,kCAAmC,EACjDD,QAAWE,YACX,IAAMC,EAAaH,SAAYI,OAyL/B,SAASC,EAAWC,EAAKC,GAAmC,IAA7BC,EAA4B,uDAAb,GAAIC,EAAS,uCACpDC,EAAQC,IAAED,MAAME,OAAOC,OAAO,CAAEC,OAAQP,EAAKO,QAAUN,IAC3DO,UAAUR,EAAK1B,UACfmC,WAAWT,EAAKU,SAChBC,OAAOZ,GAST,OANIG,GAAWF,EAAKY,SACnBT,EAAMU,GAAG,UAAU,WAClBb,EAAKY,QAAQ,SAIRT,EAGR,SAASW,EAAgBC,GAExB,OAAOC,EADM,iLAA6KD,EAA7K,yPAId,SAASC,EAAeC,GACvB,IAAMC,EAAUC,SAASC,mBAAmBH,IACtCI,EAASC,KAAKJ,GACpB,MAAM,6BAAN,OAAoCG,GAGtBE,MAlNK,SAAC,GAEd,IADNrD,EACK,EADLA,QAEA,EAA8CgB,mBAAS,MAAvD,mBAAOsC,EAAP,KAAwBC,EAAxB,KACA,EAAkDvC,mBAAS,MAA3D,mBAAOwC,EAAP,KAA0BC,EAA1B,KAEA,EAAsCzC,mBAAS,MAA/C,mBAAO0C,EAAP,KAAoBC,EAApB,KACA,EAA0C3C,mBAAS,MAAnD,mBAAO4C,EAAP,KAAsBC,EAAtB,KAEA,EAAsC7C,mBAAS,MAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KACA,EAA4B/C,oBAAS,GAArC,mBAAOgD,EAAP,KAAeC,EAAf,KACMpC,EAAMqC,cAyKZ,OAtKAC,qBAAU,WAELzC,EAAW0C,SACd1C,EAAW2C,QAGZ,IANe,EAMXC,GAAa,EANF,cAOGtE,GAPH,IAOf,IAAI,EAAJ,qBAA2B,CAAC,IAApBE,EAAmB,QACpBqE,EAAmBrE,EAAOsE,QAAUtE,EAAOuE,WAG5CvE,EAAOuE,YAAcvE,EAAOsE,QAAW9C,EAAWgD,UAAX,iBAA+BH,MAG3ED,GAAa,EAEb5C,EAAWiD,IAAX,iBAAyBJ,GACxBrE,EAAO0E,WAAa9B,EAAe5C,EAAO0E,YAAchC,EAAe1C,EAAOuE,cAjBjE,8BAmBZT,GAAUM,GACZL,GAAU,GAGRK,EACF5C,EAAWmD,MAAK,kBAAMZ,GAAU,MAGhCA,GAAU,KAET,CAACjE,IAGJmE,qBAAU,WACT,IAAIW,EAAgB,IAAIvD,YACpBwD,EAAU7C,IAAE4B,aAAY,SAAAkB,GAE3B,IAAMC,EAAQD,EAAME,WACpBF,EAAMG,eAAeC,SAASC,SAAQ,SAAAC,GAAK,OAAIA,EAAML,MAAMM,IAAI,EAAIN,MAEnED,EAAMQ,cAAcC,OAAOT,EAAMG,kBAC/BL,GAOH,OANAC,EAAQW,MAAM7D,GACdkC,EAAegB,GAEfxB,EAAmB,MACnBE,EAAqB,MAEd,kBAAMqB,EAAca,oBACzB,CAAC9D,IAGJsC,qBAAU,WACT,GAAIL,GAAe9D,GAAWgE,EAAQ,CACrC,IAAMgB,EAAQlB,EAAYkB,MACtBY,EAAYZ,EAAMG,eAClBU,EAAWb,EAAMQ,cACjBM,EAAUd,EAAMe,mBAChBd,EAAQD,EAAME,WAElBlF,EAAQqF,SAAQ,SAAAnF,GACf,IAAQ8F,EAA4F9F,EAA5F8F,GAAIvB,EAAwFvE,EAAxFuE,UAAWD,EAA6EtE,EAA7EsE,OAAQ9B,EAAqExC,EAArEwC,QAAStC,EAA4DF,EAA5DE,SAAU6B,EAAkD/B,EAAlD+B,MAAOgE,EAA2C/F,EAA3C+F,QAASC,EAAkChG,EAAlCgG,UAAWC,EAAuBjG,EAAvBiG,mBAEvEC,EAAiB5B,GAAUC,EAEjC,GAAI/C,EAAWgD,UAAX,iBAA+B0B,KAAsB1E,EAAWgD,UAAX,iBAA+B0B,IAAkBC,QAA1G,CAIA,IAAMC,EAAgB5E,EAAWgD,UAAX,iBAA+B0B,IAAkBC,QAGvEC,EAAcC,OAAS,CAAEC,EAAG,GAAKC,EAAG,GAEpC,IAAMC,EAAenF,SAAYoF,KAAKL,GAC9BH,EACFO,EAAaH,OAAOhB,IAAIY,EAAmB,GAAIA,EAAmB,IAElEO,EAAaH,OAAOhB,IAAI,GAAK,GAGnC,IAAMqB,EAAed,EAAQ1F,GAC7BsG,EAAaF,EAAII,EAAaJ,EAC9BE,EAAaD,EAAIG,EAAaH,EAE9BC,EAAazB,MAAMM,IAAI,EAAIN,GAEvBiB,GACH3C,EAAmB,CAClByC,KACA3D,OAAQ,CAAC,GAAI,IACbjC,WACAoC,QAASP,EACTS,aAIET,GAASS,GAAWuD,KACvBS,EAAaG,aAAc,IAGxB5E,GAASS,KACZgE,EAAa/D,GAAG,SAAS,WACpBD,GACHA,EAAQsD,MAIVU,EAAaI,cAAgB,UAC7BJ,EAAaK,YAAa,GAGvBd,IACHS,EAAa/D,GAAG,aAAa,WAC5Bc,EAAqB,CACpBuC,KACA3D,OAAQ,CAAC,GAAI,IACbjC,WACAoC,QAASyD,OAIXS,EAAa/D,GAAG,YAAY,WAC3Bc,EAAqB,UAIvBmC,EAAUoB,SAASN,OAGpBb,EAASJ,OAAOG,GAGjB,OAAO,kBAAM9B,GAAeA,EAAYkB,MAAMG,eAAeQ,oBAE3D,CAAC7B,EAAa9D,EAASgE,IAG1BG,qBAAU,WACLP,GACH/B,EAAIoF,WAAWrD,IAGZJ,GAAuBE,GAAgBJ,GAAmBA,EAAgB0C,KAAOxC,EAAkBwC,IACtGnC,EAAiBjC,EAAUC,EAAK2B,MAK/B,CAACA,EAAmBF,EAAiBzB,IAGxCsC,qBAAU,WAELT,GACH7B,EAAIoF,WAAWvD,GAIZJ,GACHK,EAAe/B,EAAUC,EAAKyB,EAAiB,CAAE4D,WAAW,IAAS,MAKpE,CAAC5D,EAAiBzB,IAEd,MC1KOsF,MAxBf,SAAqBpH,GAGjB,IAFA,IAAMC,EAAU,GAERC,EAAI,EAAGA,GAAKF,EAAaE,IACjC,CACI,IAAIC,EACJ,CACI8F,GAAI/F,EACJwE,UAAWxE,EAAE,IAAM,EAAI,OAAS,MAChCG,SAAU,EAAEC,KAAKC,UAAY,QAAU,SAAW,SAASC,QAAQ,KAAM,OAAAF,KAAKC,SAA+B,OAAQC,QAAQ,IAI7H0F,QAAS,UAEbjG,EAAQc,KAAKZ,GAMjB,OAHAkH,QAAQC,IAAI,mBAAoBrH,GAChCoH,QAAQC,IAAI,kBAAmBrH,EAAQsH,QAEhCtH,GCmBIuH,EAzBiB,SAAC5H,GAE7B,MAA8BqB,mBAAS,CAAC,SAAU,SAAlD,mBAAOZ,EAAP,KACQL,GADR,KACuBJ,EAAfI,YAEFC,EAAUmH,EAAYpH,GAE5B,OACI,mCACA,eAACkB,EAAA,EAAD,CACIC,OAAQd,EACRe,KAAM,EACNqG,cAAc,EACdC,QAAS,EACTC,QAAS,GALb,UAMI,cAACtG,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,cAAC,EAAD,CAAatB,QAASA,U,SC/B5BN,EAAc,SAACC,GACjB,IAAQC,EAAYD,EAAZC,OAER,OAAQ,cAACC,EAAA,EAAD,UACJ,8BAAMD,OAsBC+H,EAlBO,SAAChI,GAKnB,IAJA,IAAQI,EAAeJ,EAAfI,WAEFC,EAAU,GAERC,EAAI,EAAGA,EAAIF,EAAaE,IAAI,CACjC,IAAIC,EAAU,cAAC0H,EAAA,EAAD,CAET1G,OAAQ,EAAEb,KAAKC,UAAY,QAAU,SAAW,SAASC,QAAQ,IAAKF,KAAKC,UAAY,OAAS,OAAU,OAAQC,QAAQ,IAC1HsH,OAAQ,EAHC,SAKT,cAAC,EAAD,CAAajI,OAAQK,KAJhBA,GAMTD,EAAQc,KAAKZ,GAEjB,OAAO,mCAAGF,KCCC8H,EArBmB,SAACnI,GAE/B,MAAmBqB,mBAAS,CAAC,SAAU,SAAhCZ,EAAP,oBACQL,EAAeJ,EAAfI,WAER,OACI,mCACA,eAACkB,EAAA,EAAD,CACIC,OAAQd,EACRe,KAAM,EACNqG,cAAc,EAHlB,UAII,cAACpG,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,cAAC,EAAD,CAAevB,WAAYA,U,iBCQxBgI,G,MApBmB,SAACpI,GAE/B,MAAmBqB,mBAAS,CAAC,SAAU,SAAhCZ,EAAP,oBACQL,EAAeJ,EAAfI,WAER,OACI,mCACA,eAACkB,EAAA,EAAD,CAAcC,OAAQd,EAAUe,KAAM,EAAtC,UACI,cAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,cAAC,IAAD,UACI,cAAC,EAAD,CAASvB,WAAcA,a,SCDxBiI,MArBf,SAAmBC,GAEf,IAAIC,EAAgB,GAEpBd,QAAQC,IAAI,mCAAoCY,GAEhD,IAAK,IAAIhI,EAAI,EAAGA,GAAKgI,EAAahI,IAAI,CAClC,IAAIkI,EAAS,EAAE9H,KAAKC,UAAY,QAAU,SAAW,SAASC,QAAQ,KAAM,OAAAF,KAAKC,SAA+B,OAAQC,QAAQ,IAE5H6H,EAAS,EAAG/H,KAAKC,UAAY,QAAU,SAAW,SAASC,QAAQ,KAAM,OAAAF,KAAKC,SAA+B,QAAQC,QAAQ,IAGjI6G,QAAQC,IAAI,aAAc,CAACc,EAAOC,IAElCF,EAAcpH,KAAK,CAACqH,EAAQC,IAIhC,OAFAhB,QAAQC,IAAI,kBAAmBa,GAExBA,G,MCOX,ICYeG,EA/Ba,SAAC1I,GAEzB,MAAkBqB,mBAAS,CAAC,SAAU,SAA9BE,EAAR,oBACQnB,EAAeJ,EAAfI,WAEFuI,EAAYN,EAAUjI,GAC5B,OACI,mCACI,eAACkB,EAAA,EAAD,CACIC,OAAQA,EACRC,KAAM,EACNqG,cAAc,EAHlB,UAKI,cAACpG,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAGbgH,EAAUzG,KAAI,SAAC0G,EAAUC,GAAX,OACb,cAACC,EAAA,EAAD,CAEIC,UAAaH,EACb1F,MAAU2F,EAAI,IAAM,EAAI,QAAU,QAF3BA,YCehBG,EAnCqB,SAAChJ,GAEjC,MAAkBqB,mBAAS,CAAC,SAAU,SAA9BE,EAAR,oBACQnB,EAAeJ,EAAfI,WAEFuI,EAAYN,EAAUjI,GACtBC,EAAUmH,EAAYpH,GAE5B,OACI,mCACI,eAACkB,EAAA,EAAD,CACIC,OAAQA,EACRC,KAAM,EACNqG,cAAc,EAHlB,UAKI,cAACpG,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAGbgH,EAAUzG,KAAI,SAAC0G,EAAUC,GAAX,OACb,cAACC,EAAA,EAAD,CAEIC,UAAaH,EACb1F,MAAU2F,EAAI,IAAM,EAAI,QAAU,QAF3BA,MAMf,cAAC,EAAD,CAAaxI,QAASA,UCPvB4I,EAnBiB,SAAC7I,EAAY8I,GACzC,OAAOA,GACH,IAAK,aACD,OAAO,cAAC,EAAD,CAAqB9I,WAAcA,IAC9C,IAAK,cACD,OAAO,cAAC,EAAD,CAAyBA,WAAcA,IAClD,IAAK,gBACD,OAAO,cAAC,EAAD,CAA2BA,WAAcA,IACpD,IAAK,kBACD,OAAO,cAAC,EAAD,CAA2BA,WAAcA,IACpD,IAAK,QACD,OAAO,cAAC,EAAD,CAAqBA,WAAcA,IAC9C,IAAK,kBACD,OAAO,cAAC,EAAD,CAA6BA,WAAcA,MCXxD+I,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,SAmFCC,EA7EH,WAEV,IAAMC,EAAUR,IAEhB,EAAoC9H,mBAAS,GAA7C,mBAAOuI,EAAP,KAAmBC,EAAnB,KACA,EAA0CxI,mBAAS,IAAnD,mBAAO6H,EAAP,KAAsBY,EAAtB,KACA,EAAgCzI,oBAAS,GAAzC,mBAAO0I,EAAP,KAAiBC,EAAjB,KAoBA,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,MAAf,SACI,uBAAMC,SAvBG,SAACC,GACpBH,GAAY,GACZH,EAAcD,GACdO,EAAEC,kBAoBQ,UACE,8FAEE,uBACEC,KAAK,OACLC,MAAOV,EACPW,SAvBQ,SAACJ,GACzBN,EAAcM,EAAEK,OAAOF,OACvBN,GAAY,SAuBA,uBAAOK,KAAK,SAASC,MAAM,yBAGjC,qBAAKL,UAAU,MAAf,SACE,eAACQ,EAAA,EAAD,CAAaR,UAAWN,EAAQL,YAAhC,UACI,cAACoB,EAAA,EAAD,8BACA,eAACC,EAAA,EAAD,CACEL,MAAOpB,EACPqB,SA5BK,SAACJ,GACpB1C,QAAQC,IAAIyC,EAAEK,OAAOF,OACrBR,EAAiBK,EAAEK,OAAOF,OAC1BT,EAAc,KAuBF,UAII,cAACe,EAAA,EAAD,CAAUN,MAAM,GAAhB,kBACA,cAACM,EAAA,EAAD,CAAUN,MAAM,aAAhB,yBACA,cAACM,EAAA,EAAD,CAAUN,MAAM,cAAhB,6BACA,cAACM,EAAA,EAAD,CAAUN,MAAM,gBAAhB,+BACA,cAACM,EAAA,EAAD,CAAUN,MAAM,kBAAhB,iCACA,cAACM,EAAA,EAAD,CAAUN,MAAM,QAAhB,4BACA,cAACM,EAAA,EAAD,CAAUN,MAAM,kBAAhB,qDAMd,uBACA,gCAEsB,KAAlBpB,GACA,wDAGDa,GACCd,EAAwBW,EAAYV,UC5E/B2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASxF,OACP,cAAC,IAAMyF,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7cd5c695.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Marker, Popup} from \"react-leaflet\";\r\n// import {LocationIcon} from \"./LocationIcon\";\r\nimport markerIcon from \"leaflet/dist/images/marker-icon.png\";\r\nimport { Icon } from \"leaflet\";\r\n\r\nconst MarkerPopup = (props) => {\r\n    const { number } =  props;\r\n\r\n    return (<Popup>\r\n        <div>{number}</div>\r\n    </Popup>);\r\n}\r\n\r\nconst Markers = (props) => {\r\n    const { dataPoints } = props;\r\n\r\n    const markers = [];\r\n\r\n    for(let i = 0; i < dataPoints ; i++){\r\n       var marker =  <Marker \r\n            key={i} \r\n            position={[(Math.random() * (54.8738 - 51.0212) + 51.0212).toFixed(4), (Math.random() * (1.2343 - 0.9112) + 0.8112).toFixed(4) ]} \r\n            icon={new Icon({iconUrl: markerIcon, iconSize: [25, 41], iconAnchor: [12, 41]})}\r\n            >\r\n            <MarkerPopup number={i} />\r\n        </Marker>\r\n        markers.push(marker);\r\n    }\r\n    return <>{markers}</>\r\n};\r\n\r\nexport default Markers;\r\n","import React, { useState } from \"react\";\r\nimport {MapContainer, TileLayer } from \"react-leaflet\";\r\n//import useSwr from \"swr\";\r\n\r\nimport Markers from \"../utils/Markers\";\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n//const fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\nconst LeafletMapComponent = (props) => {\r\n\r\n    const [position] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n\r\n    // const url = \"https://data.police.uk/api/crimes-street/all-crime?poly=50.268,2.543:52.794,0.238:50.130,1.478\";\r\n\r\n    // const { data, error } = useSwr(url, { fetcher });\r\n\r\n    // const dataLength = data && data.length;\r\n    // console.log(dataLength);\r\n\r\n    // const crimes = data && !error ? data.slice(0,inputValue) : [];\r\n    //setMarkerData(crimes);\r\n\r\n    //console.log(crimes);\r\n\r\n    // const markers = {};\r\n\r\n    // for(let i=0 ; i< 10; i++){\r\n    //     markers.append({\r\n    //         \"latitude\" : (Math.random() * (52.8738 - 51.0212) + 51.0212).toFixed(4),\r\n    //         \"longitude\" : (Math.random() * (1.6343 - 0.8112) + 0.8112).toFixed(4)\r\n    //     })\r\n    // }\r\n\r\n    // console.log(markers);\r\n    // var tempMarkers = JSON.stringify(markers);\r\n    // console.log(\"Temp markers: \",tempMarkers);\r\n\r\n    return(\r\n        <>\r\n        <MapContainer center={position} zoom={6}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <Markers dataPoints = {dataPoints} />\r\n        </MapContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LeafletMapComponent;","import { useEffect, useState } from 'react';\r\n//leaflet\r\nimport L from 'leaflet';\r\n\r\n//pixi-overlay\r\nimport * as PIXI from 'pixi.js';\r\nimport 'leaflet-pixi-overlay';\r\n\r\nimport { useMap } from 'react-leaflet';\r\n\r\nPIXI.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;\r\nPIXI.utils.skipHello();\r\nconst PIXILoader = PIXI.Loader.shared;\r\n\r\nconst PixiOverlay = ({\r\n\tmarkers,\r\n}) => {\r\n\tconst [openedPopupData, setOpenedPopupData] = useState(null);\r\n\tconst [openedTooltipData, setOpenedTooltipData] = useState(null);\r\n\r\n\tconst [openedPopup, setOpenedPopup] = useState(null);\r\n\tconst [openedTooltip, setOpenedTooltip] = useState(null);\r\n\r\n\tconst [pixiOverlay, setPixiOverlay] = useState(null);\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst map = useMap();\r\n\r\n\t// load sprites\r\n\tuseEffect(() => {\r\n\t\t// cancel loading if already loading as it may cause: Error: Cannot add resources while the loader is running.\r\n\t\tif (PIXILoader.loading) {\r\n\t\t\tPIXILoader.reset();\r\n\t\t}\r\n\r\n\t\tlet loadingAny = false;\r\n\t\tfor(let marker of markers) {\r\n\t\t\tconst resolvedMarkerId = marker.iconId || marker.iconColor;\r\n\r\n\t\t\t// skip if no ID or already cached\r\n\t\t\tif((!marker.iconColor && !marker.iconId) || PIXILoader.resources[`marker_${resolvedMarkerId}`]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tloadingAny = true;\r\n\r\n\t\t\tPIXILoader.add(`marker_${resolvedMarkerId}`,\r\n\t\t\t\tmarker.customIcon ? getEncodedIcon(marker.customIcon) : getDefaultIcon(marker.iconColor));\r\n\t\t}\r\n\t\tif(loaded && loadingAny) {\r\n\t\t\tsetLoaded(false);\r\n\t\t}\r\n\r\n\t\tif(loadingAny) {\r\n\t\t\tPIXILoader.load(() => setLoaded(true));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetLoaded(true);\r\n\t\t}\r\n\t}, [markers]);\r\n\r\n\t// load pixi when map changes\r\n\tuseEffect(() => {\r\n\t\tlet pixiContainer = new PIXI.Container();\r\n\t\tlet overlay = L.pixiOverlay(utils => {\r\n\t\t\t// redraw markers\r\n\t\t\tconst scale = utils.getScale();\r\n\t\t\tutils.getContainer().children.forEach(child => child.scale.set(1 / scale));\r\n\r\n\t\t\tutils.getRenderer().render(utils.getContainer());\r\n\t\t}, pixiContainer);\r\n\t\toverlay.addTo(map);\r\n\t\tsetPixiOverlay(overlay);\r\n\r\n\t\tsetOpenedPopupData(null);\r\n\t\tsetOpenedTooltipData(null);\r\n\r\n\t\treturn () => pixiContainer.removeChildren();\r\n\t}, [map]);\r\n\r\n\t// draw markers first time in new container\r\n\tuseEffect(() => {\r\n\t\tif (pixiOverlay && markers && loaded) {\r\n\t\t\tconst utils = pixiOverlay.utils;\r\n\t\t\tlet container = utils.getContainer();\r\n\t\t\tlet renderer = utils.getRenderer();\r\n\t\t\tlet project = utils.latLngToLayerPoint;\r\n\t\t\tlet scale = utils.getScale();\r\n\r\n\t\t\tmarkers.forEach(marker => {\r\n\t\t\t\tconst { id, iconColor, iconId, onClick, position, popup, tooltip, popupOpen, markerSpriteAnchor } = marker;\r\n\r\n\t\t\t\tconst resolvedIconId = iconId || iconColor;\r\n\r\n\t\t\t\tif(!PIXILoader.resources[`marker_${resolvedIconId}`] || !PIXILoader.resources[`marker_${resolvedIconId}`].texture) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst markerTexture = PIXILoader.resources[`marker_${resolvedIconId}`].texture;\r\n\t\t\t\t//const markerTexture = new PIXI.Texture.fromImage(url);\r\n\r\n\t\t\t\tmarkerTexture.anchor = { x: 0.5, y: 1 };\r\n\r\n\t\t\t\tconst markerSprite = PIXI.Sprite.from(markerTexture);\r\n        if (markerSpriteAnchor) {\r\n          markerSprite.anchor.set(markerSpriteAnchor[0], markerSpriteAnchor[1]);\r\n        } else {\r\n          markerSprite.anchor.set(0.5, 1);\r\n        }\r\n\r\n\t\t\t\tconst markerCoords = project(position);\r\n\t\t\t\tmarkerSprite.x = markerCoords.x;\r\n\t\t\t\tmarkerSprite.y = markerCoords.y;\r\n\r\n\t\t\t\tmarkerSprite.scale.set(1 / scale);\r\n\r\n\t\t\t\tif (popupOpen) {\r\n\t\t\t\t\tsetOpenedPopupData({\r\n\t\t\t\t\t\tid,\r\n\t\t\t\t\t\toffset: [0, -35],\r\n\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\tcontent: popup,\r\n\t\t\t\t\t\tonClick,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (popup || onClick || tooltip) {\r\n\t\t\t\t\tmarkerSprite.interactive = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (popup || onClick) {\r\n\t\t\t\t\tmarkerSprite.on('click', () => {\r\n\t\t\t\t\t\tif (onClick) {\r\n\t\t\t\t\t\t\tonClick(id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tmarkerSprite.defaultCursor = 'pointer';\r\n\t\t\t\t\tmarkerSprite.buttonMode = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tooltip) {\r\n\t\t\t\t\tmarkerSprite.on('mouseover', () => {\r\n\t\t\t\t\t\tsetOpenedTooltipData({\r\n\t\t\t\t\t\t\tid,\r\n\t\t\t\t\t\t\toffset: [0, -35],\r\n\t\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\t\tcontent: tooltip,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tmarkerSprite.on('mouseout', () => {\r\n\t\t\t\t\t\tsetOpenedTooltipData(null);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontainer.addChild(markerSprite);\r\n\t\t\t});\r\n\r\n\t\t\trenderer.render(container);\r\n\t\t}\r\n\r\n\t\treturn () => pixiOverlay && pixiOverlay.utils.getContainer().removeChildren();\r\n\r\n\t}, [pixiOverlay, markers, loaded]);\r\n\r\n\t// handle tooltip\r\n\tuseEffect(() => {\r\n\t\tif (openedTooltip) {\r\n\t\t\tmap.closePopup(openedTooltip);\r\n\t\t}\r\n\r\n\t\tif (openedTooltipData && (!openedPopup || !openedPopupData || openedPopupData.id !== openedTooltipData.id)) {\r\n\t\t\tsetOpenedTooltip(openPopup(map, openedTooltipData));\r\n\t\t}\r\n\r\n\t// we don't want to reload when openedTooltip changes as we'd get a loop\r\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [openedTooltipData, openedPopupData, map]);\r\n\r\n\t// handle popup\r\n\tuseEffect(() => {\r\n\t\t// close only if different popup\r\n\t\tif (openedPopup) {\r\n\t\t\tmap.closePopup(openedPopup);\r\n\t\t}\r\n\r\n\t\t// open only if new popup\r\n\t\tif (openedPopupData) {\r\n\t\t\tsetOpenedPopup(openPopup(map, openedPopupData, { autoClose: false }, true));\r\n\t\t}\r\n\r\n\t// we don't want to reload when whenedPopup changes as we'd get a loop\r\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [openedPopupData, map]);\r\n\r\n\treturn null;\r\n};\r\n\r\nfunction openPopup (map, data, extraOptions = {}, isPopup) {\r\n\tconst popup = L.popup(Object.assign({ offset: data.offset }, extraOptions))\r\n\t\t.setLatLng(data.position)\r\n\t\t.setContent(data.content)\r\n\t\t.openOn(map);\r\n\r\n\t// TODO don't call onClick if opened a new one\r\n\tif (isPopup && data.onClick) {\r\n\t\tpopup.on('remove', () => {\r\n\t\t\tdata.onClick(null);\r\n\t\t});\r\n\t}\r\n\r\n\treturn popup;\r\n}\r\n\r\nfunction getDefaultIcon (color) {\r\n\tconst svgIcon = `<svg style=\"-webkit-filter: drop-shadow( 1px 1px 1px rgba(0, 0, 0, .4));filter: drop-shadow( 1px 1px 1px rgba(0, 0, 0, .4));\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\" width=\"36\" height=\"36\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-4.198 0-8 3.403-8 7.602 0 6.243 6.377 6.903 8 16.398 1.623-9.495 8-10.155 8-16.398 0-4.199-3.801-7.602-8-7.602zm0 11c-1.657 0-3-1.343-3-3s1.342-3 3-3 3 1.343 3 3-1.343 3-3 3z\"/></svg>`;\r\n\treturn getEncodedIcon(svgIcon);\r\n}\r\n\r\nfunction getEncodedIcon(svg) {\r\n\tconst decoded = unescape(encodeURIComponent(svg));\r\n\tconst base64 = btoa(decoded);\r\n\treturn `data:image/svg+xml;base64,${base64}`;\r\n}\r\n\r\nexport default PixiOverlay;\r\n","function giveMarkers(dataPoints) {\r\n    const markers = [];\r\n    \r\n    for(let i = 1; i <= dataPoints ; i++)\r\n    {\r\n        var marker = \r\n        {\r\n            id: i,\r\n            iconColor: i%2 === 0 ? 'blue' : 'red',\r\n            position: [(Math.random() * (52.8738 - 51.0212) + 51.0212).toFixed(4), -(Math.random() * (4.2343 - 0.9112) + 0.8112).toFixed(4) ],\r\n            // popup: renderToString(\r\n            //     <MarkerPopup number={i} />\r\n            // ),\r\n            tooltip: 'marker'\r\n        }\r\n        markers.push(marker);\r\n    }\r\n\r\n    console.log(\"Rendered markers\", markers);\r\n    console.log(\"Markers count: \", markers.length);\r\n\r\n    return markers;\r\n}\r\n\r\nexport default giveMarkers;","import React, { useState } from \"react\";\r\nimport { MapContainer, TileLayer, Popup } from \"react-leaflet\";\r\nimport PixiOverlay from \"./PixiOverlay\";\r\nimport 'leaflet/dist/leaflet.css';\r\n//import { renderToString } from 'react-dom/server';\r\nimport giveMarkers from \"../utils/giveMarkers\";\r\n\r\n// const MarkerPopup = (props) => {\r\n//     const { number } =  props;\r\n\r\n//     return (<Popup>\r\n//         <div>{number}</div>\r\n//     </Popup>);\r\n// }\r\n\r\nconst PixiOverlayMapComponent = (props) => {\r\n\r\n    const [position, setCenter] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n    \r\n    const markers = giveMarkers(dataPoints);\r\n\r\n    return(\r\n        <>\r\n        <MapContainer \r\n            center={position} \r\n            zoom={6} \r\n            preferCanvas={true}\r\n            minZoom={3}\r\n            maxZoom={20}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <PixiOverlay markers={markers} />\r\n        </MapContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PixiOverlayMapComponent;","import React from \"react\";\r\nimport {CircleMarker, Popup} from \"react-leaflet\";\r\n\r\nconst MarkerPopup = (props) => {\r\n    const { number } =  props;\r\n\r\n    return (<Popup>\r\n        <div>{number}</div>\r\n    </Popup>);\r\n}\r\n\r\nconst CircleMarkers = (props) => {\r\n    const { dataPoints } = props;\r\n\r\n    const markers = [];\r\n\r\n    for(let i = 0; i < dataPoints ; i++){\r\n       var marker =  <CircleMarker \r\n            key={i} \r\n            center={[(Math.random() * (54.8738 - 51.0212) + 51.0212).toFixed(4), (Math.random() * (1.2343 - 0.9112) + 0.8112).toFixed(4) ]} \r\n            radius={3}\r\n            >\r\n            <MarkerPopup number={i} />\r\n        </CircleMarker>\r\n        markers.push(marker);\r\n    }\r\n    return <>{markers}</>\r\n};\r\n\r\nexport default CircleMarkers;\r\n","import React, { useState } from \"react\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport CircleMarkers from \"../utils/CircleMarkers\";\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst CircleMarkersMapComponent = (props) => {\r\n\r\n    const [position] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n\r\n    return(\r\n        <>\r\n        <MapContainer \r\n            center={position} \r\n            zoom={6} \r\n            preferCanvas={true}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <CircleMarkers dataPoints={dataPoints} />\r\n        </MapContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CircleMarkersMapComponent;","import React, { useState } from \"react\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\n\r\nimport Markers from \"../utils/Markers\";\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'react-leaflet-markercluster/dist/styles.min.css';\r\n\r\nconst MarkerClusterMapComponent = (props) => {\r\n\r\n    const [position] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n\r\n    return(\r\n        <>\r\n        <MapContainer center={position} zoom={6}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <MarkerClusterGroup>\r\n                <Markers dataPoints = {dataPoints} />\r\n            </MarkerClusterGroup>\r\n        </MapContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerClusterMapComponent;","function giveLines(linesToDraw){\r\n\r\n    var tempPolyLines = [];\r\n\r\n    console.log(\"Number of lines requested are : \", linesToDraw);\r\n\r\n    for( let i = 1; i <= linesToDraw; i++){\r\n        let aPoint = [(Math.random() * (52.8738 - 51.0212) + 51.0212).toFixed(4), -(Math.random() * (4.2343 - 0.9112) + 0.9112).toFixed(4)]\r\n        // console.log(\"aPoint:\", aPoint);\r\n        let bPoint = [ (Math.random() * (57.8738 - 53.0212) + 53.0212).toFixed(4), -(Math.random() * (6.2343 - 2.9112) + 2.9112).toFixed(4)]\r\n        // console.log(\"bPoint: \", bPoint);\r\n\r\n        console.log(\"formedLine\", [aPoint,bPoint]);    \r\n\r\n        tempPolyLines.push([aPoint, bPoint]);\r\n    }\r\n    console.log(\"Temp polyLines:\", tempPolyLines);\r\n\r\n    return tempPolyLines;\r\n}\r\n\r\nexport default giveLines;","import { useLeafletContext } from \"@react-leaflet/core\";\r\nimport L, { polyline } from \"leaflet\";\r\nimport { useMap } from \"react-leaflet\";\r\n\r\n\r\nfunction giveTempPolyLines(linesToDraw){\r\n    var tempPolyLines = [];\r\n\r\n    console.log(\"Number of lines requested are : \", linesToDraw);\r\n\r\n    for( let i = 1; i <= linesToDraw; i++){\r\n        let aPoint = [(Math.random() * (52.8738 - 51.0212) + 51.0212).toFixed(4), (Math.random() * (4.2343 - 0.9112) + 0.9112).toFixed(4)]\r\n        console.log(\"aPoint:\", aPoint);\r\n        let bPoint = [ (Math.random() * (57.8738 - 53.0212) + 53.0212).toFixed(4),  (Math.random() * (6.2343 - 2.9112) + 2.9112).toFixed(4)]\r\n        console.log(\"bPoint: \", bPoint);\r\n\r\n        console.log(\"formedLine\", [aPoint,bPoint]);    \r\n\r\n        tempPolyLines.push([aPoint, bPoint]);\r\n    }\r\n    console.log(\"Temp polyLines:\", tempPolyLines);\r\n\r\n    return tempPolyLines;\r\n}\r\n\r\nconst Routing = (props) => {\r\n    const { numberOfLines } = props;\r\n    const map = useMap();\r\n\r\n    const context = useLeafletContext();\r\n\r\n    let retrievedPolyLines = giveTempPolyLines(numberOfLines); \r\n\r\n    retrievedPolyLines.map((item, index) => {\r\n\r\n        console.log(`Line ${index}:`, item);\r\n      \r\n        let polyLine = new L.polyline(item, { color: 'green'});\r\n        const container = context.layerContainer || context.map;\r\n        container.addLayer(polyLine);\r\n    })\r\n\r\n//     console.log(\"tempPolyLines[0]: \", tempPolyLines[0]);\r\n\r\n//     L.polyline(tempPolyLines[0]).addTo(map);\r\n\r\n//     let atempLine = [\r\n//         [45.51, -122.68],\r\n//         [37.77, -122.43]\r\n//    ];\r\n//    console.log(\" a TempLine :\", atempLine);\r\n//    L.polyline(atempLine).addTo(map);   \r\n\r\n    return null\r\n}\r\n\r\nexport default Routing;","import React, { useState } from \"react\";\r\nimport { MapContainer, Polyline, TileLayer } from \"react-leaflet\";\r\nimport giveLines from \"../utils/giveLines\";\r\nimport Routing from \"./Routing\";\r\n\r\n\r\nconst RoutingMapComponent = (props) => {\r\n\r\n    const [ center] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n\r\n    const polyLines = giveLines(dataPoints);\r\n    return (\r\n        <>\r\n            <MapContainer \r\n                center={center} \r\n                zoom={6} \r\n                preferCanvas={true}\r\n                >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n               {\r\n                   polyLines.map((polyline, idx) => \r\n                    <Polyline\r\n                        key = {idx}\r\n                        positions = {polyline}\r\n                        color = { idx%2 === 0 ? 'green' : 'blue'}\r\n                        />\r\n                    )\r\n               }\r\n            </MapContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RoutingMapComponent;","import React, { useState } from \"react\";\r\nimport { MapContainer, Polyline, TileLayer } from \"react-leaflet\";\r\nimport giveLines from \"../utils/giveLines\";\r\nimport giveMarkers from \"../utils/giveMarkers\";\r\nimport PixiOverlay from \"./PixiOverlay\";\r\n\r\nconst LinesAndMarkersMapComponent = (props) => {\r\n\r\n    const [ center] = useState([52.4862, -1.8904]);\r\n    const { dataPoints } = props;\r\n\r\n    const polyLines = giveLines(dataPoints);\r\n    const markers = giveMarkers(dataPoints);\r\n\r\n    return (\r\n        <>\r\n            <MapContainer \r\n                center={center} \r\n                zoom={6} \r\n                preferCanvas={true}\r\n                >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n               {\r\n                   polyLines.map((polyline, idx) => \r\n                    <Polyline\r\n                        key = {idx}\r\n                        positions = {polyline}\r\n                        color = { idx%2 === 0 ? 'green' : 'blue'}\r\n                        />\r\n                    )\r\n               }\r\n                <PixiOverlay markers={markers}/>\r\n            </MapContainer>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default LinesAndMarkersMapComponent;","import React from \"react\";\r\nimport LeafletMapComponent from \"./LeafletMapComponent\";\r\nimport PixiOverlayMapComponent from \"./PixiOverlayMapComponent\";\r\nimport CircleMarkersMapComponent from \"./CircleMarkersMapComponent\";\r\nimport MarkerClusterMapComponent from \"./MarkerClusterMapComponent\";\r\nimport RoutingMapComponent from \"./RoutingMapComponent\";\r\nimport LinesAndMarkersMapComponent from \"./LinesAndMarkersMapComponent\";\r\n\r\nconst ConditionalMapRendering = (dataPoints, selectedValue) => {\r\n    switch(selectedValue){\r\n        case 'leafletmap':\r\n            return <LeafletMapComponent dataPoints = {dataPoints}/>\r\n        case 'pixioverlay':\r\n            return <PixiOverlayMapComponent dataPoints = {dataPoints}/>\r\n        case 'circlemarkers':\r\n            return <CircleMarkersMapComponent dataPoints = {dataPoints} />\r\n        case 'markersclusters':\r\n            return <MarkerClusterMapComponent dataPoints = {dataPoints}/>\r\n        case 'lines':\r\n            return <RoutingMapComponent dataPoints = {dataPoints} />\r\n        case 'linesandmarkers':\r\n            return <LinesAndMarkersMapComponent dataPoints = {dataPoints} />\r\n        default:\r\n            <h2>These are another maps!!</h2>    \r\n    }              \r\n}\r\n\r\nexport default ConditionalMapRendering;","import React, { useState } from \"react\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport './App.css';\nimport ConditionalMapRendering from \"./components/ConditionalMapRendering\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n\n})\n);\n\nconst App = () => {\n\n  const classes = useStyles();\n\n  const [inputValue, setInputValue] = useState(0);\n  const [selectedValue, setSelectedValue] = useState('');\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const handleSubmit = (e) => {\n    setIsSubmit(true);\n    setInputValue(inputValue);\n    e.preventDefault();\n  };\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n    setIsSubmit(false);\n  }\n\n  const handleChange = (e) => {\n    console.log(e.target.value);\n    setSelectedValue(e.target.value);\n    setInputValue('');\n    // console.log(\"Selected value\", selectedValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n              <form onSubmit={handleSubmit}>\n                <label>\n                  Enter the number of datapoints/ lines to plot on the map:\n                  <input \n                    type=\"text\" \n                    value={inputValue} \n                    onChange={handleInputChange} />\n                </label>\n                <input type=\"submit\" value=\"Enter the value\" />\n              </form>\n          </div>\n          <div className=\"col\">\n            <FormControl className={classes.formControl}>\n                <InputLabel>Select the map </InputLabel>\n                <Select \n                  value={selectedValue}\n                  onChange={handleChange} \n                  >\n                    <MenuItem value=\"\">None</MenuItem>\n                    <MenuItem value=\"leafletmap\">Leaflet Map</MenuItem>\n                    <MenuItem value=\"pixioverlay\">PixiOverlay Map</MenuItem>\n                    <MenuItem value=\"circlemarkers\">CircleMarkers Map</MenuItem>\n                    <MenuItem value=\"markersclusters\">Marker Clusters Map</MenuItem>\n                    <MenuItem value=\"lines\">Map with lines</MenuItem>\n                    <MenuItem value=\"linesandmarkers\">Map with lines and markers</MenuItem>\n                </Select>\n              </FormControl>\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div>\n        {\n          selectedValue === \"\" && (\n          <h3>Please select the map </h3> \n          )\n        }\n        {isSubmit && (\n          ConditionalMapRendering(inputValue, selectedValue)\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}